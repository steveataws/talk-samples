AWSTemplateFormatVersion: '2010-09-09'
Resources:
  GlobalCFSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties: 
      GroupDescription: A list of global CloudFront IP address ranges
  RegionalCFSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties: 
      GroupDescription: A list of regional CloudFront IP address ranges
  InstanceSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Allow traffic from the load balancer that ensures traffic comes from CloudFront
  AllowGlobalCFTraffic:
    Type: AWS::EC2::SecurityGroupIngress
    Properties: 
      FromPort: 80
      GroupId: !GetAtt InstanceSecurityGroup.GroupId
      IpProtocol: tcp
      SourceSecurityGroupId: !GetAtt GlobalCFSecurityGroup.GroupId
      ToPort: 80
  AllowRegionalCFTraffic:
    Type: AWS::EC2::SecurityGroupIngress
    Properties: 
      FromPort: 80
      GroupId: !GetAtt InstanceSecurityGroup.GroupId
      IpProtocol: tcp
      SourceSecurityGroupId: !GetAtt RegionalCFSecurityGroup.GroupId
      ToPort: 80
  sampleApplication:
    Type: AWS::ElasticBeanstalk::Application
    Properties:
      Description: AWS Elastic Beanstalk Sample Application
  sampleApplicationVersion:
    Type: AWS::ElasticBeanstalk::ApplicationVersion
    Properties:
      ApplicationName:
        Ref: sampleApplication
      Description: AWS ElasticBeanstalk Sample Application Version
      SourceBundle:
        S3Bucket: !Sub "elasticbeanstalk-samples-${AWS::Region}"
        S3Key: php-newsample-app.zip
  sampleConfigurationTemplate:
    Type: AWS::ElasticBeanstalk::ConfigurationTemplate
    DependsOn:
    - AllowGlobalCFTraffic
    - AllowRegionalCFTraffic
    Properties:
      ApplicationName:
        Ref: sampleApplication
      Description: AWS ElasticBeanstalk Sample Configuration Template
      OptionSettings:
      - Namespace: aws:autoscaling:launchconfiguration
        OptionName: SecurityGroups
        Value: !Ref InstanceSecurityGroup
      - Namespace: aws:autoscaling:asg
        OptionName: MinSize
        Value: '2'
      - Namespace: aws:autoscaling:asg
        OptionName: MaxSize
        Value: '2'
      - Namespace: aws:elasticbeanstalk:environment
        OptionName: EnvironmentType
        Value: LoadBalanced
      - Namespace: aws:elbv2:loadbalancer
        OptionName: SecurityGroups
        Value: !Sub "${GlobalCFSecurityGroup.GroupId}, ${RegionalCFSecurityGroup.GroupId}"
      - Namespace: aws:elbv2:loadbalancer
        OptionName: ManagedSecurityGroup
        Value: !GetAtt GlobalCFSecurityGroup.GroupId
      - Namespace: aws:elasticbeanstalk:environment
        OptionName: LoadBalancerType
        Value: application
      - Namespace: aws:autoscaling:launchconfiguration
        OptionName: IamInstanceProfile
        Value: aws-elasticbeanstalk-ec2-role
      SolutionStackName: 64bit Amazon Linux 2018.03 v2.8.3 running PHP 5.6
  sampleEnvironment:
    Type: AWS::ElasticBeanstalk::Environment
    Properties:
      ApplicationName:
        Ref: sampleApplication
      Description: AWS ElasticBeanstalk Sample Environment
      TemplateName:
        Ref: sampleConfigurationTemplate
      VersionLabel:
        Ref: sampleApplicationVersion
  PresentationLayerCDN:
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        DefaultCacheBehavior:
          ForwardedValues:
            QueryString: 'false'
          TargetOriginId: MainSite
          ViewerProtocolPolicy: allow-all
          MinTTL: 0
          MaxTTL: 600
          DefaultTTL: 600
        Enabled: true
        Origins:
          - DomainName: !GetAtt sampleEnvironment.EndpointURL
            CustomOriginConfig:
              HTTPPort: 80
              OriginProtocolPolicy: http-only
            Id: MainSite
  LambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: JobPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - ec2:DescribeSecurityGroups
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: 
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
              - Effect: Allow
                Action:
                  - ec2:AuthorizeSecurityGroupIngress
                  - ec2:RevokeSecurityGroupIngress
                Resource:
                  - !Sub "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:security-group/${GlobalCFSecurityGroup.GroupId}"
                  - !Sub "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:security-group/${RegionalCFSecurityGroup.GroupId}"

Outputs:
  GlobalSGId:
    Value: !GetAtt GlobalCFSecurityGroup.GroupId
  RegionalSGId:
    Value: !GetAtt RegionalCFSecurityGroup.GroupId
  LambdaIAMRole:
    Value: !GetAtt LambdaRole.Arn
  CloudFrontUrl:
    Value: !Sub "http://${PresentationLayerCDN.DomainName}"
